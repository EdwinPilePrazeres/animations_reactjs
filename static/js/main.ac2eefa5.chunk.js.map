{"version":3,"sources":["components/Modal/Modal.js","components/Backdrop/Backdrop.js","components/List/List.js","App.js","registerServiceWorker.js","index.js"],"names":["modal","props","CSSTransition","in","show","timeout","enter","exit","mountOnEnter","unmountOnExit","classNames","enterActive","exitActive","className","onClick","closed","backdrop","cssClasses","join","List","state","items","addItemHandler","setState","prevState","concat","length","removeItemHandler","selIndex","filter","item","index","listItems","this","map","TransitionGroup","component","Component","App","modalIsOpen","showBlock","showModal","closeModal","Transition","onEnter","console","log","onEntering","onEntered","onExit","onExiting","onExited","style","backgroundColor","width","height","margin","transition","opacity","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ac2eefa5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\nimport \"./Modal.css\";\r\n\r\nconst modal = props => {\r\n\r\nconst animationTiming = {\r\n  enter: 400,\r\n  exit: 1000\r\n};\r\n  return (\r\n    <CSSTransition \r\n          in={props.show} \r\n          timeout={animationTiming}\r\n          mountOnEnter\r\n          unmountOnExit\r\n          classNames={{\r\n            enter: '',\r\n            enterActive: 'ModalOpen',\r\n            exit: '',\r\n            exitActive: 'ModalClosed'\r\n          }}\r\n      >\r\n\r\n          <div className=\"Modal\">\r\n            <h1>A Modal</h1>\r\n            <button className=\"Button\" onClick={props.closed}>\r\n              Dismiss\r\n            </button>\r\n          </div>\r\n  \r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default modal;\r\n","import React from 'react';\r\n\r\nimport './Backdrop.css';\r\n\r\nconst backdrop = (props) => {\r\n    const cssClasses = ['Backdrop', props.show ? 'BackdropOpen' : 'BackdropClosed'];\r\n\r\n    return <div className={cssClasses.join(' ')}></div>;\r\n};\r\n\r\nexport default backdrop;","import React, { Component } from 'react';\r\nimport TransitionGroup from 'react-transition-group/TransitionGroup';\r\nimport CSSTransition from 'react-transition-group/CSSTransition';\r\n\r\nimport './List.css';\r\n\r\nclass List extends Component {\r\n    state = {\r\n        items: [1, 2, 3]\r\n    }\r\n\r\n    addItemHandler = () => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                items: prevState.items.concat(prevState.items.length + 1)\r\n            };\r\n        });\r\n    }\r\n\r\n    removeItemHandler = (selIndex) => {\r\n        this.setState((prevState) => {\r\n            return {\r\n                items: prevState.items.filter((item, index) => index !== selIndex)\r\n            };\r\n        });\r\n    }\r\n\r\n    render () {\r\n        const listItems = this.state.items.map( (item, index) => (\r\n            <CSSTransition \r\n                key={index}\r\n                classNames=\"fade\"\r\n                timeout={300}>\r\n                <li \r\n                    \r\n                    className=\"ListItem\" \r\n                    onClick={() => this.removeItemHandler(index)}\r\n                    >\r\n                        {item}\r\n                </li>\r\n            </CSSTransition>\r\n        ) );\r\n\r\n        return (\r\n            <div>\r\n                <button className=\"Button\" onClick={this.addItemHandler}>Add Item</button>\r\n                <p>Click Item to Remove.</p>\r\n                <TransitionGroup \r\n                    component=\"ul\"\r\n                    className=\"List\">\r\n                    {listItems}\r\n                </TransitionGroup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React, { Component } from \"react\";\nimport Transition from \"react-transition-group/Transition\";\n\nimport \"./App.css\";\nimport Modal from \"./components/Modal/Modal\";\nimport Backdrop from \"./components/Backdrop/Backdrop\";\nimport List from \"./components/List/List\";\n\nclass App extends Component {\n  state = {\n    modalIsOpen: false,\n    showBlock: false\n  };\n\n  showModal = () => {\n    this.setState({ modalIsOpen: true });\n  };\n\n  closeModal = () => {\n    this.setState({ modalIsOpen: false });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>React Animations</h1>\n        <button\n          className=\"Button\"\n          onClick={() =>\n            this.setState(prevState => ({ showBlock: !prevState.showBlock }))}\n        >\n          Toggle\n        </button>\n        <br />\n        <Transition \n          in={this.state.showBlock} \n          timeout={1000}\n          mountOnEnter\n          unmountOnExit\n          onEnter={() => console.log('onEneter')}\n          onEntering={() => console.log('onEntering')}\n          onEntered={() => console.log('onEntered')}\n          onExit={() => console.log('onExit')}\n          onExiting={() => console.log('onExiting')}\n          onExited={() => console.log('onExited')}\n\n          >\n          {state => (\n            <div\n              style={{\n                backgroundColor: \"red\",\n                width: 100,\n                height: 100,\n                margin: \"auto\",\n                transition: 'opacity 1s ease-out',\n                opacity: state === 'exiting' ? 0 : 1\n              }}\n            />\n          )}\n        </Transition>\n        <Modal show={this.state.modalIsOpen} closed={this.closeModal} />\n        {this.state.modalIsOpen ? (\n          <Backdrop show />\n        ) : null}\n        <button className=\"Button\" onClick={this.showModal}>\n          Open Modal\n        </button>\n        <h3>Animating Lists</h3>\n        <List />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (!isLocalhost) {\r\n          // Is not local host. Just register service worker\r\n          registerValidSW(swUrl);\r\n        } else {\r\n          // This is running on localhost. Lets check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n                // the fresh content will have been added to the cache.\r\n                // It's the perfect time to display a \"New content is\r\n                // available; please refresh.\" message in your web app.\r\n                console.log('New content is available; please refresh.');\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get('content-type').indexOf('javascript') === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}